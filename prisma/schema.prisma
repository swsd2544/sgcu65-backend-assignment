generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String
  firstname     String?
  lastname      String?
  password      String
  role          Role
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  createdTasks  Task[]
  assignedTasks TeamsTasks[]
  usersTeams    UsersTeams[]
}

model Team {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  teamsTasks TeamsTasks[]
  usersTeams UsersTeams[]
}

model Task {
  id         Int          @id @default(autoincrement())
  name       String
  content    String?
  status     Status       @default(PENDING)
  deadline   DateTime
  userId     Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  createdBy  User         @relation(fields: [userId], references: [id])
  teamsTasks TeamsTasks[]
}

model UsersTeams {
  id     Int  @id @default(autoincrement())
  userId Int
  teamId Int
  team   Team @relation(fields: [teamId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId, teamId], name: "usersTeamsIdentifier")
}

model TeamsTasks {
  id         Int  @id @default(autoincrement())
  teamId     Int
  taskId     Int
  assignerId Int
  assignBy   User @relation(fields: [assignerId], references: [id])
  task       Task @relation(fields: [taskId], references: [id])
  team       Team @relation(fields: [teamId], references: [id])

  @@unique([teamId, taskId], name: "teamsTasksIdentifier")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  COMPLETE
  OVERDUE
}
